function initScrollAnimations(){setupFocusObserver()}function setupFocusObserver(){if(!("IntersectionObserver"in window))return console.warn("IntersectionObserver не поддерживается, используем fallback"),void setupScrollFallback();const e=new IntersectionObserver(e=>{e.forEach(e=>{handleFocusEffect(e)})},{root:null,rootMargin:"-20% 0px -20% 0px",threshold:[0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]});document.querySelectorAll(".scroll-hidden").forEach(s=>{e.observe(s)})}function handleFocusEffect(e){const s=e.target,n=e.intersectionRatio,o=e.isIntersecting;o&&n>.05?(s.classList.remove("scroll-hidden"),s.classList.add("scroll-visible")):o||0!==n||(s.classList.add("scroll-hidden"),s.classList.remove("scroll-visible"))}function setupScrollFallback(){let e=!1;window.addEventListener("scroll",()=>{e||(requestAnimationFrame(()=>{checkElementsInView(),e=!1}),e=!0)},{passive:!0}),checkElementsInView()}function checkElementsInView(){const e=document.querySelectorAll(".scroll-hidden"),s=window.innerHeight,n=window.pageYOffset;e.forEach(e=>{const o=e.offsetTop;o+e.offsetHeight>n&&o<n+s?(e.classList.remove("scroll-hidden"),e.classList.add("scroll-visible")):(e.classList.add("scroll-hidden"),e.classList.remove("scroll-visible"))})}document.addEventListener("DOMContentLoaded",initScrollAnimations);